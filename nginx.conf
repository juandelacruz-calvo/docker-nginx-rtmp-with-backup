daemon off;

error_log /dev/stdout info;

events {
    worker_connections 1024;
}

rtmp {
    server {
        listen ${RTMP_PORT};
        chunk_size 4000;

        application out {
            # Enable live streaming.
            live on;
            hls on;
#            hls_fragment_naming system;
            hls_path /opt/data/hls;
            hls_fragment 5s;
            hls_playlist_length 10;
#            hls_nested on;

#            hls_variant _720p5256kbs BANDWIDTH=5256000,RESOLUTION=1280x720;

#            exec ffmpeg -i rtmp://localhost:1935/out/$name
#                  -c:a libfdk_aac -b:a 256k -c:v libx264 -b:v 5000k -f flv -g 30 -r 30 -s 1280x720 -preset medium -profile:v baseline rtmp://localhost:1935/hls/$name_720p5256kbs;

            deny play all;
        }

        # An application for main incoming streams.
		# Its name should match $MAIN_STREAM_APPNAME in config.sh.
		application main {
			# Enable live streaming.
			live on;

			# This will prevent avconv/ffmpeg from hanging when stream ends.
			# We will kill it from scripts anyway, but just in case.
			play_restart on;

			# You may want this in case not to allow anyone to watch streams from this point.
#			deny play all;
			# However, we need `out` app to have access.
#			allow play 192.168.1.0/24;

			# That's where the magic starts.
			# Do not forget to change paths.
			# Output for scripts is already redirected, see README#Usage#Logs.

			# When any stream starts publishing to this app,
			# we call main_publish.sh and provide a streamname as a parameter.
#			exec_publish /usr/local/share/backup/main_publish.sh $name;
			exec_publish /usr/local/share/backup/main_publish.sh $name;
			# When stream stops publishing,
			# call main_publish_done.sh and pass a streamname to it.
			exec_publish_done /usr/local/share/backup/main_publish_done.sh $name;
		}

		# An application for backup incoming streams.
		# Its name should match $BACKUP_STREAM_APPNAME in config.sh.
		# Everything is the same as for `main` app.
		application backup {
			live on;
			play_restart on;
#			deny play all;
#			allow play 192.168.1.0/24;

            exec_publish /usr/local/share/backup/backup_publish.sh $name;

			# When stream stops publishing,
			# call backup_publish_done.sh and pass a streamname to it.
			exec_publish_done /usr/local/share/backup/backup_publish_done.sh $name;
		}

#        application hls {
#            live on;
#            hls on;
#            hls_fragment_naming system;
#            hls_path /opt/data/hls;
#            hls_fragment 5;
#            hls_playlist_length 10;
#            hls_nested on;
#            hls_variant _720p5256kbs BANDWIDTH=5256000,RESOLUTION=1280x720;
#            deny play all;
#        }
    }
}

http {
    access_log /dev/stdout combined;

    ssl_ciphers         HIGH:!aNULL:!MD5;
    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
    ssl_session_cache   shared:SSL:10m;
    ssl_session_timeout 10m;

    server {
        listen ${HTTP_PORT};

        # Uncomment these lines to enable SSL.
        # Update the ssl paths with your own certificate and private key.
        # listen 443 ssl;
        # ssl_certificate     /opt/certs/example.com.crt;
        # ssl_certificate_key /opt/certs/example.com.key;


        location /live {
          alias /opt/data/hls;
          types {
              application/vnd.apple.mpegurl m3u8;
              video/mp2t ts;
          }
          add_header Cache-Control no-cache;
          add_header Access-Control-Allow-Origin *;
        }

        location /stat {
            rtmp_stat all;
            rtmp_stat_stylesheet static/stat.xsl;
        }

        location /static {
            alias /www/static;
        }

        location = /crossdomain.xml {
            root /www/static;
            default_type text/xml;
            expires 24h;
        }
    }
}
